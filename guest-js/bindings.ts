/* eslint-disable */ 
 // @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
/**
 * Send an analytics event to the RudderStack data plane.
 */
async sendAnalyticsAlias(event: Alias) : Promise<void> {
    await TAURI_INVOKE("plugin:rudderstack|send_analytics_alias", { event });
},
/**
 * Send an analytics event to the RudderStack data plane.
 */
async sendAnalyticsGroup(event: Group) : Promise<void> {
    await TAURI_INVOKE("plugin:rudderstack|send_analytics_group", { event });
},
/**
 * Send an [Identify] event to the RudderStack data plane.
 */
async sendAnalyticsIdentify(event: Identify) : Promise<void> {
    await TAURI_INVOKE("plugin:rudderstack|send_analytics_identify", { event });
},
/**
 * Send a [Page] event to the RudderStack data plane.
 */
async sendAnalyticsPage(event: Page) : Promise<void> {
    await TAURI_INVOKE("plugin:rudderstack|send_analytics_page", { event });
},
/**
 * Send a [Screen] event to the RudderStack data plane.
 */
async sendAnalyticsScreen(event: Screen) : Promise<void> {
    await TAURI_INVOKE("plugin:rudderstack|send_analytics_screen", { event });
},
/**
 * Send a [Track] event to the RudderStack data plane.
 */
async sendAnalyticsTrack(event: Track) : Promise<void> {
    await TAURI_INVOKE("plugin:rudderstack|send_analytics_track", { event });
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

/**
 * An alias event.
 * 
 * The `alias` call lets you merge different identities of a known user. \
 * 
 * Alis is an advanced method that lets you change the tracked user's ID explicitly. This method is useful when managing identities for some of the downstream destinations.
 * 
 */
export type Alias = { 
/**
 * The user id associated with this message.
 */
userId: string; 
/**
 * The user's previous ID.
 */
previousId: string; 
/**
 * The traits to assign to the alias.
 */
traits?: JsonValue | null; 
/**
 * Context associated with this message.
 */
context?: JsonValue | null; 
/**
 * Integrations to route this message to.
 */
integrations?: JsonValue | null }
/**
 * A group event.
 * The `group` call lets you associate an identified user to a group - either a company, project or a team and record any custom traits or properties associated with that group. \
 * An identified user can be in more than one group.
 */
export type Group = { 
/**
 * The user id associated with this message.
 */
userId?: string | null; 
/**
 * The group the user is being associated with.
 */
groupId: string; 
/**
 * The traits to assign to the group.
 */
traits?: JsonValue | null; 
/**
 * Context associated with this message.
 */
context?: JsonValue | null; 
/**
 * Integrations to route this message to.
 */
integrations?: JsonValue | null }
/**
 * An identify event.
 * The identify call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.
 */
export type Identify = { 
/**
 * The user id associated with this message.
 */
userId?: string | null; 
/**
 * The traits to assign to the user.
 */
traits?: JsonValue | null; 
/**
 * Context associated with this message.
 */
context?: JsonValue | null; 
/**
 * Integrations to route this message to.
 */
integrations?: JsonValue | null }
export type JsonValue = null | boolean | number | string | JsonValue[] | { [key in string]: JsonValue }
/**
 * A page event.
 * 
 * The page call allows you to record the page views on your website along with the other relevant information about the viewed page.
 * RudderStack recommends calling page at least once every page load.
 */
export type Page = { 
/**
 * The user id associated with this message.
 */
userId?: string | null; 
/**
 * The name of the page being tracked.
 */
name: string; 
/**
 * The properties associated with the event.
 */
properties?: JsonValue | null; 
/**
 * Context associated with this message.
 */
context?: JsonValue | null; 
/**
 * Integrations to route this message to.
 */
integrations?: JsonValue | null }
/**
 * A screen event.
 * 
 * The screen call is the mobile equivalent of the page call.
 * 
 * The screen method lets you record whenever the user views their mobile screen, along with any additional relevant information about the screen.
 * The screen call is the mobile equivalent of the page call.
 */
export type Screen = { 
/**
 * The user id associated with this message.
 */
userId?: string | null; 
/**
 * The name of the screen being tracked.
 */
name: string; 
/**
 * The properties associated with the event.
 */
properties?: JsonValue | null; 
/**
 * Context associated with this message.
 */
context?: JsonValue | null; 
/**
 * Integrations to route this message to.
 */
integrations?: JsonValue | null }
/**
 * A track event.
 * The track call lets you record the user actions along with their associated properties. Each user action is called an event.
 */
export type Track = { 
/**
 * The user id associated with this message.
 */
userId?: string | null; 
/**
 * The name of the event being tracked.
 */
event: string; 
/**
 * The properties associated with the event.
 */
properties?: JsonValue | null; 
/**
 * Context associated with this message.
 */
context?: JsonValue | null; 
/**
 * Integrations to route this message to.
 */
integrations?: JsonValue | null }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: T extends null
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
