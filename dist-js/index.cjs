'use strict';

var core = require('@tauri-apps/api/core');
require('@tauri-apps/api/event');

/* eslint-disable */
// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.
/** user-defined commands **/
const commands = {
    /**
     * Send an analytics event to the RudderStack data plane.
     */
    async sendAnalyticsAlias(event) {
        await core.invoke("plugin:rudderstack|send_analytics_alias", { event });
    },
    /**
     * Send an analytics event to the RudderStack data plane.
     */
    async sendAnalyticsGroup(event) {
        await core.invoke("plugin:rudderstack|send_analytics_group", { event });
    },
    /**
     * Send an [Identify] event to the RudderStack data plane.
     */
    async sendAnalyticsIdentify(event) {
        await core.invoke("plugin:rudderstack|send_analytics_identify", { event });
    },
    /**
     * Send a [Page] event to the RudderStack data plane.
     */
    async sendAnalyticsPage(event) {
        await core.invoke("plugin:rudderstack|send_analytics_page", { event });
    },
    /**
     * Send a [Screen] event to the RudderStack data plane.
     */
    async sendAnalyticsScreen(event) {
        await core.invoke("plugin:rudderstack|send_analytics_screen", { event });
    },
    /**
     * Send a [Track] event to the RudderStack data plane.
     */
    async sendAnalyticsTrack(event) {
        await core.invoke("plugin:rudderstack|send_analytics_track", { event });
    }
};

const getPageProperties = () => {
    return {
        title: document.title,
        url: window.location.href,
        path: window.location.pathname,
    };
};
/**
 * Watch for URL changes and send analytics events.
 *
 * @returns A function to stop watching for URL changes.
 */
const watchURLChanges = () => {
    const rs = history.pushState;
    history.pushState = function () {
        // @ts-expect-error
        rs.apply(history, arguments); // preserve normal functionality
        const props = getPageProperties();
        sendPageEvent({
            name: props.path,
            properties: {
                title: props.title,
                url: props.url,
            },
        });
    };
    return () => {
        history.pushState = rs;
    };
};
/**
 * a page event
 * @param {Page} page
 */
const sendPageEvent = async (page) => {
    await commands.sendAnalyticsPage(page);
};
/**
 * a screen event
 * @param {Screen} screen
 */
const sendScreenEvent = async (screen) => {
    await commands.sendAnalyticsScreen(screen);
};
const addPageProperties = (message) => {
    const pageProperties = getPageProperties();
    // Ensure message.properties is initialized as an object
    if (!message.properties || typeof message.properties !== 'object') {
        message.properties = {};
    }
    // Cast properties to an object for type safety
    const properties = message.properties;
    // Merge the page properties into the properties field
    properties.page = {
        ...(properties.page || {}),
        ...pageProperties,
    };
    // Assign the updated properties back to the message
    message.properties = properties;
    return message;
};
/**
 * a track event
 * @param {Track} message
 */
const sendTrackEvent = async (message) => {
    const msg = addPageProperties(message);
    await commands.sendAnalyticsTrack(msg);
};
/**
 * a identify event
 * @param {Identify} message
 */
const sendIdentifyEvent = async (message) => {
    await commands.sendAnalyticsIdentify(message);
};
/**
 * a group event
 * @param {Group} message
 */
const sendGroupEvent = async (message) => {
    await commands.sendAnalyticsGroup(message);
};
/**
 * a alias event
 * @param {Alias} message
 */
const sendAliasEvent = async (message) => {
    await commands.sendAnalyticsAlias(message);
};

exports.commands = commands;
exports.sendAliasEvent = sendAliasEvent;
exports.sendGroupEvent = sendGroupEvent;
exports.sendIdentifyEvent = sendIdentifyEvent;
exports.sendPageEvent = sendPageEvent;
exports.sendScreenEvent = sendScreenEvent;
exports.sendTrackEvent = sendTrackEvent;
exports.watchURLChanges = watchURLChanges;
