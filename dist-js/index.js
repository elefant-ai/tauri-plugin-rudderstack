import { invoke } from '@tauri-apps/api/core';
import '@tauri-apps/api/event';

/* eslint-disable */
// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.
/** user-defined commands **/
const commands = {
    /**
     * Send an analytics event to the RudderStack data plane.
     */
    async sendAnalyticsAlias(event) {
        await invoke("plugin:rudderstack|send_analytics_alias", { event });
    },
    /**
     * Send an analytics event to the RudderStack data plane.
     */
    async sendAnalyticsGroup(event) {
        await invoke("plugin:rudderstack|send_analytics_group", { event });
    },
    /**
     * Send an [Identify] event to the RudderStack data plane.
     */
    async sendAnalyticsIdentify(event) {
        await invoke("plugin:rudderstack|send_analytics_identify", { event });
    },
    /**
     * Send a [Page] event to the RudderStack data plane.
     */
    async sendAnalyticsPage(event) {
        await invoke("plugin:rudderstack|send_analytics_page", { event });
    },
    /**
     * Send a [Screen] event to the RudderStack data plane.
     */
    async sendAnalyticsScreen(event) {
        await invoke("plugin:rudderstack|send_analytics_screen", { event });
    },
    /**
     * Send a [Track] event to the RudderStack data plane.
     */
    async sendAnalyticsTrack(event) {
        await invoke("plugin:rudderstack|send_analytics_track", { event });
    }
};

/**
 * Watch for URL changes and send analytics events.
 *
 * @returns A function to stop watching for URL changes.
 */
const watchURLChanges = () => {
    const rs = history.pushState;
    history.pushState = function () {
        // @ts-expect-error
        rs.apply(history, arguments); // preserve normal functionality
        sendPageEvent({
            name: window.location.pathname,
            properties: {
                title: document.title,
                url: window.location.href
            },
        });
    };
    return () => {
        history.pushState = rs;
    };
};
/**
 * a page event
 * @param {Page} page
 */
const sendPageEvent = async (page) => {
    await commands.sendAnalyticsPage(page);
};
/**
 * a screen event
 * @param {Screen} screen
 */
const sendScreenEvent = async (screen) => {
    await commands.sendAnalyticsScreen(screen);
};
/**
 * a track event
 * @param {Track} message
 */
const sendTrackEvent = async (message) => {
    await commands.sendAnalyticsTrack(message);
};
/**
 * a identify event
 * @param {Identify} message
 */
const sendIdentifyEvent = async (message) => {
    await commands.sendAnalyticsIdentify(message);
};
/**
 * a group event
 * @param {Group} message
 */
const sendGroupEvent = async (message) => {
    await commands.sendAnalyticsGroup(message);
};
/**
 * a alias event
 * @param {Alias} message
 */
const sendAliasEvent = async (message) => {
    await commands.sendAnalyticsAlias(message);
};

export { commands, sendAliasEvent, sendGroupEvent, sendIdentifyEvent, sendPageEvent, sendScreenEvent, sendTrackEvent, watchURLChanges };
